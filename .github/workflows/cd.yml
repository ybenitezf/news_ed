on:
  push:
    branches: [main]

jobs:
  python-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          plugins: |
            poetry-multiproject-plugin
            poetry-polylith-plugin
          virtualenvs-create: true
          virtualenvs-in-project: true
          virtualenvs-path: .venv
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Build projects packages
        run: bash build-packages.sh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: news_app_dist
          path: projects/news_app/dist/*.whl
          if-no-files-found: "error"

  app-build:
    - name: Build electron application
      needs: python-build
      strategy:
        matrix:
          os: [linux, macos, windows]
      runs-on: ${{ matrix.os }}

      steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Download artifact news_app_dist
          uses: actions/download-artifact@v4
          with:
            name: news_app_dist
            path: projects/elec_app/dist

        - name: Set up Python
          uses: actions/setup-python@v5
          with:
            python-version: "3.11"

        - name: create python binary
          run: |
            python3 -m venv .venv
            source .venv/bin/activate
            pip install pyinstaller
            pip install dist/*.whl
            pyinstaller --onefile runner.py
            mv dist/runner papp/runner
          working-directory: projects/elec_app

        - uses: actions/setup-node@v4
          with:
            node-version: "20"
            cache: "npm"
            cache-dependency-path: "projects/elec_app/package-lock.json"

        - name: Build electron app
          run: |
            npm install
            npm run package
          working-directory: projects/elec_app

        - name: debug files
          working-directory: projects/elec_app
          run: |
            ls -lR dist/*

        # - name: Upload artifacts
        #   uses: actions/upload-artifact@v4
        #   with:
        #     name: app_dist
        #     path: projects/elec_app/dist
        #     if-no-files-found: "error"
